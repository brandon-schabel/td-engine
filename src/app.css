@import "tailwindcss";

/* Custom utilities and overrides can go here */

/* Preserve existing animations */
@keyframes gradientShift {
  0% {
    background-position: 0% 0%;
  }
  50% {
    background-position: 100% 100%;
  }
  100% {
    background-position: 0% 0%;
  }
}

@keyframes particleFloat {
  0%,
  100% {
    transform: translateY(0) translateX(0);
  }
  25% {
    transform: translateY(-10px) translateX(5px);
  }
  50% {
    transform: translateY(0) translateX(-5px);
  }
  75% {
    transform: translateY(-5px) translateX(2px);
  }
}

@keyframes float {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px);
  }
}

@keyframes pulse {
  0%,
  100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.05);
  }
}

@keyframes shimmer {
  0% {
    background-position: -200px 0;
  }
  100% {
    background-position: 200px 0;
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInScale {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes glowPulse {
  0%, 100% {
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.1);
  }
  50% {
    box-shadow: 0 0 40px rgba(255, 255, 255, 0.3);
  }
}

@keyframes borderGlow {
  0%, 100% {
    border-color: rgba(255, 255, 255, 0.2);
  }
  50% {
    border-color: rgba(255, 255, 255, 0.4);
  }
}

/* Custom utilities */
@layer utilities {
  .safe-bottom {
    padding-bottom: env(safe-area-inset-bottom, 0);
  }

  .safe-top {
    padding-top: env(safe-area-inset-top, 0);
  }

  .safe-left {
    padding-left: env(safe-area-inset-left, 0);
  }

  .safe-right {
    padding-right: env(safe-area-inset-right, 0);
  }

  .safe-x {
    padding-left: env(safe-area-inset-left, 0);
    padding-right: env(safe-area-inset-right, 0);
  }

  .safe-y {
    padding-top: env(safe-area-inset-top, 0);
    padding-bottom: env(safe-area-inset-bottom, 0);
  }

  /* Glass morphism effects */
  .glass {
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
  }

  .glass-dark {
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    background: rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
    color: white;
  }

  .glass-light {
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    background: rgba(255, 255, 255, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.2);
    color: white;
  }

  .glass-medium {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    background: rgba(255, 255, 255, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.15);
    box-shadow: 0 12px 48px 0 rgba(0, 0, 0, 0.3);
    color: white;
  }

  .glass-heavy {
    backdrop-filter: blur(24px);
    -webkit-backdrop-filter: blur(24px);
    background: rgba(0, 0, 0, 0.6);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 16px 64px 0 rgba(0, 0, 0, 0.4);
    color: white;
  }

  .glass-gradient {
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.15) 0%, 
      rgba(255, 255, 255, 0.05) 100%);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
    color: white;
  }

  .glass-border-glow {
    position: relative;
    overflow: hidden;
  }

  .glass-border-glow::before {
    content: '';
    position: absolute;
    inset: -2px;
    background: linear-gradient(45deg, 
      transparent 30%, 
      rgba(255, 255, 255, 0.3) 50%, 
      transparent 70%);
    border-radius: inherit;
    opacity: 0;
    transition: opacity 0.3s ease;
    animation: shimmer 3s linear infinite;
  }

  .glass-border-glow:hover::before {
    opacity: 1;
  }

  /* Animation utilities */
  .animate-fade-in-up {
    animation: fadeInUp 0.5s ease-out;
  }

  .animate-fade-in-scale {
    animation: fadeInScale 0.3s ease-out;
  }

  .animate-glow-pulse {
    animation: glowPulse 2s ease-in-out infinite;
  }

  .animate-border-glow {
    animation: borderGlow 2s ease-in-out infinite;
  }

  /* Stagger animations for children */
  .stagger-children > * {
    animation: fadeInUp 0.4s ease-out;
    animation-fill-mode: both;
  }

  .stagger-children > *:nth-child(1) { animation-delay: 0ms; }
  .stagger-children > *:nth-child(2) { animation-delay: 50ms; }
  .stagger-children > *:nth-child(3) { animation-delay: 100ms; }
  .stagger-children > *:nth-child(4) { animation-delay: 150ms; }
  .stagger-children > *:nth-child(5) { animation-delay: 200ms; }
  .stagger-children > *:nth-child(6) { animation-delay: 250ms; }
}

/* Slider component styles */
.slider-input::-webkit-slider-thumb {
  appearance: none;
  width: var(--thumb-width);
  height: var(--thumb-height);
  border-radius: 50%;
  background: white;
  border: 2px solid theme('colors.button.primary');
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  cursor: pointer;
  transition: all 0.2s;
}

.slider-input::-webkit-slider-thumb:hover {
  transform: scale(1.1);
}

.slider-input::-webkit-slider-thumb:active {
  transform: scale(0.95);
}

.slider-input::-moz-range-thumb {
  appearance: none;
  width: var(--thumb-width);
  height: var(--thumb-height);
  border-radius: 50%;
  background: white;
  border: 2px solid theme('colors.button.primary');
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  cursor: pointer;
  transition: all 0.2s;
}

.slider-input::-moz-range-thumb:hover {
  transform: scale(1.1);
}

.slider-input::-moz-range-thumb:active {
  transform: scale(0.95);
}

/* Game-specific styles */
.game-paused {
  @apply absolute inset-0 bg-black/50 pointer-events-none z-10;
}
